name: CI/CD Workflow

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11 and Maven
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          architecture: 'x64'

      - name: Install Docker
        run: |
          if ! docker --version; then
            # Update the package list
            sudo apt update
            # Install required dependencies
            sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
            # Add the Docker repository key
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            # Add the Docker APT repository
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            # Update the package list again
            sudo apt update
            # Install Docker
            sudo apt install -y docker-ce docker-ce-cli containerd.io
            # Start the Docker service
            sudo systemctl start docker
            # Enable Docker to start on boot
            sudo systemctl enable docker
            # Add the current user to the 'docker' group
            sudo usermod -aG docker $USER
          fi
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install MySQL on EC2 Instance
        run: |
          sudo apt update
          sudo apt install -y mysql-server

      - name: Start MySQL Service
        run: sudo service mysql start

      - name: Check if Docker network exists
        run: |
          if docker network inspect my_network >/dev/null 2>&1; then
          echo "Docker network 'my_network' already exists. Skipping creation..."
          exit 0
          else
          echo "Creating Docker network 'my_network'..."
          docker network create my_network
          fi


      - name: Build with Maven
        run: mvn package -Dmaven.test.skip=true
        working-directory: /home/ubuntu/actions-runner/_work/newGithubdemo/newGithubdemo  # Adjust to your Maven project directory

      - name: Build Docker image
        run: sudo docker build -t newdemo:latest .
        working-directory: /home/ubuntu/actions-runner/_work/newGithubdemo/newGithubdemo  # Adjust to your Maven project directory

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: docker tag newdemo:latest sharan7898/newdemo:latest
        
      - name: Push Docker image to Docker Hub
        run: docker push sharan7898/newdemo:latest

      - name: Deploy Docker Containers on EC2 Instance
        run: |
          ssh -i /home/ubuntu/ssh.pem ubuntu@13.49.75.67 '
            docker stop my_mysql || true
            docker rm my_mysql || true
            docker pull mysql:latest
            docker run -d --name my_mysql --network my_network -e "MYSQL_ROOT_PASSWORD=root" -e "MYSQL_DATABASE=db_nysfkhelo_youth_loc" -e "MYSQL_USER=root" -e "MYSQL_PASSWORD=root" mysql:latest
            docker stop my_app || true
            docker rm my_app || true
            docker pull sharan7898/newdemo:latest
            docker run -d --name my_app --network my_network -p 8080:8081 -e "MYSQL_HOST=my_mysql" -e "MYSQL_PORT=3306" -e "MYSQL_DATABASE=db_nysfkhelo_youth_loc" -e "MYSQL_USER=root" -e "MYSQL_PASSWORD=root" sharan7898/newdemo:latest
          '
